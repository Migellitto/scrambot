"""
—Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º bot.py —Å–æ–∑–¥–∞–¥–∏–º –¥—Ä—É–≥–æ–π –∫–∞—Ç–∞–ª–æ–≥ handlers, –∞ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Ñ–∞–π–ª questions.py.
–û–±—Ä–∞—Ç–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—É–Ω–∫—Ç—ã [1] –∏ [2]. –í–æ-–ø–µ—Ä–≤—ã—Ö, –º—ã –≤ —Ñ–∞–π–ª–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
—Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è, –∏ –¥–∞–ª–µ–µ –±—É–¥–µ–º —Ü–µ–ø–ª—è—Ç—å –µ–≥–æ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —Ä–æ—É—Ç–µ—Ä—É (–¥–∏—Å–ø–µ—Ç—á–µ—Ä—É).
–í–æ-–≤—Ç–æ—Ä—ã—Ö, —Ö—ç–Ω–¥–ª–µ—Ä—ã ¬´–æ—Ç–ø–æ—á–∫–æ–≤—ã–≤–∞—é—Ç—Å—è¬ª —É–∂–µ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞.
"""
import re
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.for_start_kb import start_action, tasks_list_done_kb, tasks_list_fail_kb
from keyboards.for_view_kb import view_action
from check_user import check_users
from db.sqlite_db import sqlite_task_id_update_0, sqlite_task_id_update_1, sqlite_insert_new_task

router = Router()  # [1]


class TaskName(StatesGroup):
    task_name = State()

@router.message(Command("start"))  # [2]
async def cmd_start(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer("–ß—Ç–æ –Ω–∞–¥–æ?", reply_markup=start_action())
    else:
        await message.answer_dice(emoji="üé≤")

@router.message(F.text.lower() == "–ø—Ä–æ—Å–º–æ—Ç—Ä")
async def answer_see(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ /view", reply_markup=view_action())

@router.message(F.text.lower() == "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def answer_add(message: Message, state: FSMContext):
    if check_users(message.from_user.id) == True:
        await message.answer("–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏",reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskName.task_name)
        await message.answer("–ù–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è —Ç–∞—Å–∫–∏")

@router.message(TaskName.task_name)
async def fsm_second_step(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    data = await state.get_data()
    sqlite_insert_new_task(str(data["task_name"]))
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Å–∫–∏: {data["task_name"]}; –°—Ç–∞—Ç—É—Å: –¥–æ–±–∞–≤–ª–µ–Ω–æ.', reply_markup=start_action())
    await state.clear()

@router.message(F.text.lower() == "—É–¥–∞–ª–µ–Ω–∏–µ")
async def answer_del(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer("–ù–ï –†–ê–ë–û–¢–ê–ï–¢", reply_markup=ReplyKeyboardRemove())

@router.message(F.text.lower() == "–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
async def answer_del(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer("–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ ID ‚úÖ", reply_markup=tasks_list_done_kb())

@router.message(F.text.lower() == "–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
async def answer_del(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer("–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ù–ï–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ ID ‚ùå", reply_markup=tasks_list_fail_kb())

@router.message(F.text.startswith("‚úÖ ID "))
async def answer_del(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer(f"{message.text}", reply_markup=ReplyKeyboardRemove())
        task_id = int(re.sub("‚úÖ ID ","",message.text))
        sqlite_task_id_update_0(task_id)
        await message.answer(f"task_id {task_id}", reply_markup=start_action())

@router.message(F.text.startswith("‚ùå ID "))
async def answer_del(message: Message):
    if check_users(message.from_user.id) == True:
        await message.answer(f"{message.text}", reply_markup=ReplyKeyboardRemove())
        task_id = int(re.sub("‚ùå ID ","",message.text))
        sqlite_task_id_update_1(task_id)
        await message.answer(f"task_id {task_id}", reply_markup=start_action())